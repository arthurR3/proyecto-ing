name: Run Jest Tests

# Disparadores para el workflow
on:
  push:
    branches:
      - '*'    # Ejecutar las pruebas en cualquier rama en cada push
  pull_request:
    branches:
      - master   # Ejecutar las pruebas antes de fusionar a master


permissions: write-all

jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.1

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.14.0'

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

  test-services:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.1

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.14.0'

      - name: Restore Node.js modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Run Services Tests
        run: npm test -- --testPathPattern='servicios.test.js'

  test-login:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.1

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.14.0'

      - name: Restore Node.js modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Run Login Tests
        run: npm test -- --testPathPattern='src/test/login.test.js'

  test-products:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.1

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.14.0'

      - name: Restore Node.js modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Run Products Tests
        run: npm test -- --testPathPattern='productos.test.js'

  # Publicación de los resultados de cobertura
  coverage-report:
    runs-on: ubuntu-latest
    needs: [test-services, test-login, test-products]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Upload coverage to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage
  deploy:
    runs-on: ubuntu-latest
    needs: [test-services, test-login, test-products]
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.1

      - name: Install Vercel CLI
        run: npm install -g vercel
      - name: Deploy to Production Vercel
      run: |
        echo "Desplegando aplicación a producción..."
        npx vercel --prod --token ${{ secrets.VERCEL_TOKEN }}